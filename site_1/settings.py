"""
Django settings for site_1 project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# 아래부터 다른 파일에서 꺼내 쓸 수 있는 목록들 리스트
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# 프로젝트 폴더 자체 경로(site_1 경로)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+zx9hhii4b6xc9%v0g-5lon!^11%il%bl4e+g%b=w2b#yh79be'
# 장고 서비스 시크릿키 - 해당 시크릿 키로 내부 코드 확인 가능.. 웹서비스 발포 후 시크릿 후 변경

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# 문제 왜 터졌는지 상세하게 유저에게 알려줌

ALLOWED_HOSTS = []
# 내 웹사이트에 접근 가능한 url 목록 지정

# Application definition

INSTALLED_APPS = [
    'lotto',
    'django.contrib.admin', # 관리자 페이지 관련
    'django.contrib.auth', # 회원관리 페이지 관련
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
] # 웹사이트 안 기능들

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
] # 처리 도맡아서 함 / 해킹방지, 침입방지 등

ROOT_URLCONF = 'site_1.urls' # 메인 url 패턴 정의 및 설정

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
] # 유저에게 되돌려 보내줄 html파일

WSGI_APPLICATION = 'site_1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
} # models.py에서 db table 하나당 클래스 하나 생성하고 db파일 생성. 얘 바깥으로 가져가서
# 테이블 행 데이터로 채우고 마지막으로 가져옴


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr' # 관리자페이지, 에러페이지 등 영문으로

TIME_ZONE = 'Asia/Seoul' # 작성 게시글 등의 등록 시간 

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
# static 폴더 안에 사진, css, js파일 모아둠. 웹서비스 발포하면
# 브라우저에서 특정한 url 입력해서 접근함으로서 유저에게 노출됨 / static 폴더 경로를 정함
STATIC_ROOT = os.path.join(BASE_DIR, 'static') # site_1/static
# 우리가 만드는 static 파일을 앱 단위로 한 데 모아줌 
# 앱 폴더마다 흩어져있는 static 파일을 한 데 모아줌 / 경로명 문자열로 합침


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
